<div class="grid">
  <div class="maze">
    <% max_size = 600 %>
    <% padding = 10 %>
    <% maze = @maze %>
    <% square_size = Integer.floor_div(max_size, maze.width) %>

    <svg width="100%" height="100%" viewbox="0 0 <%= 2 * padding + square_size * maze.width %> <%= 2 * padding + square_size * maze.height %>">
      <g transform="translate(<%= padding %>, <%= padding %>)">
        <%= RectangularMaze.map(maze, fn {x, y} = vertex -> %>
          <% class = [] %>
          <% class = if vertex in @solution, do: ["highlight" | class], else: class %>
          <% class = if vertex == maze.from, do: ["start" | class], else: class %>
          <% class = if vertex == maze.to, do: ["end" | class], else: class %>
          <% fill = @colors && RectangularMazeColors.color(@colors.distances[vertex], @colors.max_distance, @hue) %>
          <% fill = if vertex in @solution, do: "hsl(#{Integer.mod(@hue + 127, 255)}, 100%, 50%)", else: fill %>

          <rect width="<%= square_size %>"
                height="<%= square_size %>"
                class="<%= Enum.join(class, " ") %>"
                <%= if fill do %> style="fill: <%= fill %>" <% end %>
                x="<%= square_size * (x - 1) %>"
                y="<%= square_size * (y - 1) %>"
          />
        <% end )%>

        <%= RectangularMaze.map(maze, fn {x, y} = vertex -> %>
          <%= if RectangularMaze.wall?(maze, vertex, RectangularMaze.north(vertex)) do %>
            <line x1="<%= square_size * (x - 1) %>"
                  y1="<%= square_size * (y - 1) %>"
                  x2="<%= square_size * (x) %>"
                  y2="<%= square_size * (y - 1) %>"
            />
          <% end %>

          <%= if RectangularMaze.wall?(maze, vertex, RectangularMaze.west(vertex)) do %>
            <line x1="<%= square_size * (x - 1) %>"
                  y1="<%= square_size * (y - 1) %>"
                  x2="<%= square_size * (x - 1) %>"
                  y2="<%= square_size * (y) %>"
            />
          <% end %>

          <%= if x == maze.width do %>
            <line x1="<%= square_size * maze.width %>"
                  y1="<%= square_size * (y - 1) %>"
                  x2="<%= square_size * maze.width %>"
                  y2="<%= square_size * (y) %>"
            />
          <% end %>

          <%= if y == maze.height do %>
            <line x1="<%= square_size * (x - 1) %>"
                  y1="<%= square_size * maze.height %>"
                  x2="<%= square_size * (x) %>"
                  y2="<%= square_size * maze.height %>"
            />
          <% end %>
        <% end )%>
      </g>
    </svg>
  </div>

  <div class="maze-settings">
    <form phx-change="settings_change" phx-submit="generate">
      <div>
        Maze generation algorithm:
        <input type="radio"
               id="algorithm-sidewinder"
               value="Elixir.Mazes.SidewinderAlgorithm"
               <%= if @algorithm === Elixir.Mazes.SidewinderAlgorithm, do: "checked" %>
               name="algorithm" />

        <label for="algorithm-sidewinder">Sidewinder</label>

        <input type="radio"
               id="algorithm-binary-tree"
               value="Elixir.Mazes.BinaryTreeAlgorithm"
                <%= if @algorithm === Elixir.Mazes.BinaryTreeAlgorithm, do: "checked" %>
               name="algorithm" />

        <label for="algorithm-binary-tree">Binary Tree</label>
      </div>

      <div>
        Entrance and exit placement strategy:
        <input type="radio"
               id="entrance-exit-hardest"
               value="set_longest_path_from_and_to"
                <%= if @entrance_exit_strategy === :set_longest_path_from_and_to, do: "checked" %>
               name="entrance_exit_strategy" />

        <label for="entrance-exit-hardest">Longest path</label>

        <input type="radio"
               id="entrance-exit-random"
               value="set_random_border_from_and_to"
                <%= if @entrance_exit_strategy === :set_random_border_from_and_to, do: "checked" %>
               name="entrance_exit_strategy" />

        <label for="entrance-exit-random">Random</label>

        <input type="radio"
               id="entrance-exit-nil"
               value="nil"
                <%= if @entrance_exit_strategy === :nil, do: "checked" %>
               name="entrance_exit_strategy" />

        <label for="entrance-exit-nil">None</label>
      </div>

      <div>
        <label for="width">Width</label>
        <input type="number" min="1" max="50" step="1" name="width" value="<%= @width %>" id="width" />

        <label for="height">Height</label>
        <input type="number" min="1" max="50" step="1" name="height" value="<%= @height %>" id="height" />
      </div>

      <div>
        <button type="submit">Generate</button>
      </div>

      <%= if maze.from && maze.to do %>
        <button type="button" phx-click="solve" <%= if @solution != [], do: "disabled" %>>Solve</button>
      <% end %>

      <div>
        <div>
          The darker the color, the further away from the entrance of the maze (or the center when there's no entrance).
        </div>
        <div>
          <input type="range" name="hue" min="0" max="255" value="<%= @hue %>" id="hue">
          <label for="hue">Hue</label>
        </div>

        <button type="button" phx-click="color" <%= if @colors, do: "disabled" %>>Color</button>
      </div>
    </form>
  </div>
</div>
