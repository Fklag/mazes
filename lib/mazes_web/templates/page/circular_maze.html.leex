<div class="maze" id="maze">
  <%
    {center_x, center_y} = circular_maze_center(@maze)
  %>

  <svg width="100%" height="100%" viewbox="0 0 <%= 2 * (padding() + circular_maze_radius(@maze)) %> <%= 2 * (padding() + circular_maze_radius(@maze)) %>">

    <%= Enum.map(Mazes.CircularMaze.rings(@maze), fn %{ring: ring, column_count: column_count, vertices: vertices} -> %>
    <%= if ring == 1 do %>
    <circle cx="<%= center_x %>" cy="<%= center_y %>" r="<%= circular_maze_radius(@maze) / @maze.rings %>"
            <%= raw vertex_fill(@maze, {1, 1}, @solution, @settings.show_solution, @colors, @settings.show_colors, @settings.hue) %>
    />
    <% else %>
    <%= Enum.map(vertices, fn {current_column, ring} = vertex -> %>
    <%
      %{
        outer_arc_radius: outer_arc_radius,
        outer_arc_start: {outer_arc_start_x, outer_arc_start_y},
        outer_arc_end: {outer_arc_end_x, outer_arc_end_y},
        inner_arc_radius: inner_arc_radius,
        inner_arc_start: {inner_arc_start_x, inner_arc_start_y},
        inner_arc_end: {inner_arc_end_x, inner_arc_end_y},
      } = circular_maze_vertex_points(@maze, column_count, ring, current_column)
    %>

    <path d="M <%= outer_arc_start_x %> <%= outer_arc_start_y %>
             A <%= outer_arc_radius %> <%= outer_arc_radius %> 0 0 1 <%= outer_arc_end_x %> <%= outer_arc_end_y %>
             L <%= inner_arc_end_x %> <%= inner_arc_end_y %>
             A <%= inner_arc_radius %> <%= inner_arc_radius %> 0 0 0 <%= inner_arc_start_x %> <%= inner_arc_start_y %>
             L <%= outer_arc_start_x %> <%= outer_arc_start_y %>"
          stroke="<%= vertex_color(@maze, vertex, @solution, @settings.show_solution, @colors, @settings.show_colors, @settings.hue) %>"
          <%= raw vertex_fill(@maze, vertex, @solution, @settings.show_solution, @colors, @settings.show_colors, @settings.hue) %>
    />

    <% end) %>
    <% end %>
    <% end) %>

    <%= Enum.map(Mazes.CircularMaze.rings(@maze), fn %{ring: ring, column_count: column_count, vertices: vertices} -> %>
    <%= if ring > 1 do %>
    <%= Enum.map(vertices, fn {current_column, ring} = vertex -> %>
    <%
      %{
        outer_arc_radius: outer_arc_radius,
        outer_arc_start: {outer_arc_start_x, outer_arc_start_y},
        outer_arc_end: {outer_arc_end_x, outer_arc_end_y},
        inner_arc_radius: inner_arc_radius,
        inner_arc_start: {inner_arc_start_x, inner_arc_start_y},
        inner_arc_end: {inner_arc_end_x, inner_arc_end_y},
      } = circular_maze_vertex_points(@maze, column_count, ring, current_column)
    %>

    <%= if Mazes.Maze.wall?(@maze, vertex, Mazes.CircularMaze.inner(@maze, vertex)) do %>
    <path d="M <%= inner_arc_end_x %> <%= inner_arc_end_y %>
             A <%= inner_arc_radius %> <%= inner_arc_radius %> 0 0 0 <%= inner_arc_start_x %> <%= inner_arc_start_y %>"
          fill="transparent" style="<%= line_style(@maze) %>" />
    <% end %>

    <%= if Mazes.Maze.wall?(@maze, vertex, Mazes.CircularMaze.cw(@maze, vertex)) do %>
    <path d="M <%= outer_arc_end_x %> <%= outer_arc_end_y %>
             L <%= inner_arc_end_x %> <%= inner_arc_end_y %>"
          fill="transparent" style="<%= line_style(@maze) %>" />
    <% end %>

    <%= if ring == @maze.rings do %>
    <path d="M <%= outer_arc_start_x %> <%= outer_arc_start_y %>
             A <%= outer_arc_radius %> <%= outer_arc_radius %> 0 0 1 <%= outer_arc_end_x %> <%= outer_arc_end_y %>"
          fill="transparent" style="<%= line_style(@maze) %>" />
    <% end %>

    <% end) %>
    <% end %>
    <% end) %>
  </svg>
</div>
